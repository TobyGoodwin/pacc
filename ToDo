Semantics of rep

    Make "?" and "*" return the value "0" if they matched nothing.
    Modify pacc.pacc to exploit this.

Error handling

    This needs more experience. Currently, the merging of errors
    destroys more information than I'm happy with.  Also, need to get
    line numbers. One possibility is to count newlines after an error
    has been encountered; another is to maintain a line counter as we
    currently maintain col, incrementing it if "any" matches a newline
    and by the newline count in every matched literal. Yet another
    problem is that the names of constructed rules sometimes appear in
    errors: 'expected x.55 or "*/" at column 462' is not very helpful!

Complete the command-line interface

    Need --help for one. And --defines (write a .h file), although I'm
    inclined to think that that should be the default. And for the
    partialization hack: --feeder to specify the function that extends a
    line (if that's the interface we want); --feed-rule to specify what
    the rule that matches end-of-line is called; if we have defaults for
    both of these, --feed to turn on feeding.

Detect (and handle?) left recursion

    Piumarta does this by analyzing the tree. We will need to copy this,
    perhaps as part of desugaring or optimizing. Other things include:
    checking that every rule is reached; checking that non-void rules
    always return a value (and that void rules never do).

Optimize

    First for space - this is ongoing with hashing, and eval list stuff.
    Then (and we will need some more test cases) for time.

Scoping

    Names in pacc grammars are supposed to scope statically over
    sequences, but that clearly isn't the case at the moment, otherwise
    test/pacc/scope1.pacc would compile!

Parser optimization / manipulation (including partialization hack)

Value inheritance

    In your rule "SeqRule ← s:Sequence → s / u:UnaryRule → u" would not
    "SeqRule ← Sequence / UnaryRule" do as well, if not better?

Many many cleanups (XXX)

Generate #line directives

Review of the parsing engine - do we really need so many stacks?

Review of pacc.pacc

    I was shocked (but not surprised) to discover that pacc *already*
    understood arbitrary bindings. Need to ensure that anything we can
    parse really has a meaning that works.

Autoconfiscation

    Reluctantly, for the Makefile is beautiful, we must ultimately
    autoconfiscate for the sake of widest dispersal. (The option of
    maintaining a release version and a "director's cut" in parallel does
    not please me.)

Only one instance of each type per union

Handle void types

Dynamically allocate everything

UTF-8 support

Documentation

More research

    Top of the list, "left recursion considered harmful".

Ask permissions

    There is some code derived from Bryan Ford's material around,
    particularly the Java parser.
