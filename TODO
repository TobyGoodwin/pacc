Error handling

    This needs more experience. Currently, the merging of errors
    destroys more information than I'm happy with.  Also, need to get
    line numbers. One possibility is to count newlines after an error
    has been encountered; another is to maintain a line counter as we
    currently maintain col, incrementing it if "any" matches a newline
    and by the newline count in every matched literal.

Complete the command-line interface

    Need --help for one. And --defines, although I'm inclined to think
    that that should be the default.

Detect (and handle?) left recursion

    Piumarta does this by analyzing the tree. We will need to copy this,
    perhaps as part of desugaring or optimizing. Other things include:
    checking that every rule is reached; checking that non-void rules
    always return a value (and that void rules never do).

Parser optimization / manipulation (including partialization hack)

Value inheritance

    In your rule "SeqRule ← s:Sequence → s / u:UnaryRule → u" would not
    "SeqRule ← Sequence / UnaryRule" do as well, if not better?

Replace the intermediate results matrix with hashing

Reinstate emit tests: they can still be useful (see Internals)

Many many cleanups (XXX)

Recognise comments in raw code

Generate #line directives

Review of the parsing engine - do we really need so many stacks?

Autoconfiscation

Only one instance of each type per union

Handle void types

Dynamically allocate everything

UTF-8 support

Documentation
