{

#include "syntax.h"

}

Grammar :: struct s_node *
    ← _ p:Preamble ds:Defns End { s_grammar(p, ds) }

Defns
    ← d:Defn ds:Defns { cons(d, ds) }
    / ε { 0 }

Defn
    ← n:Name t:TypeOptional lArrow r:Rule _ →
	{ s_both(rule, name, cons(s_text(type, t), r)) }

Rule
    ← s:SeqRule Slash r:Rule { s_kid(alt, cons(s, r)) }
    / s:SeqRule → s

SeqRule
    ← s:Sequence → s
    / u:UnaryRule → u

UnaryRule
    ← p:PrimRule Query { s_query(p) }
    / p:PrimRule Star { s_star(p) }
    / p:PrimRule Plus { s_plus(p) }
    / p:PrimRule → p

PrimRule
    ← n:Name { s_call(n) } !lArrow !ColCol
    / l:StringLit { s_lit(l) }
    / lParen r:Rule rParen → r

Sequence
    ← m:Matchers r:Result { s_seq(snoc(m, r)) }
    / m:Matchers { s_seq(m) }

Matchers
    ← m:Matcher ms:Matchers { cons(m, ms) }
    / m:Matcher → m

Matcher
    ← n:Name Colon u:UnaryRule { s_bind(n, u) }
    / And u:UnaryRule { s_and(u) }
    / Not u:UnaryRule { s_not(u) }
    / And r:RawCode { s_guard(r) }
    / u:UnaryRule → u

Result
    ← rArrow n:Name → s_expr(n)
    / rArrow? r:RawCode → s_expr(r)

Name :: char *
    ← NameStart NameCont* { match() } _

Preamble
    ← r:RawCode _ → r
    / ε { 0 }

RawCode
    ← "{" (c:Char &{ *c != 0x7d)* } "}" { match() } _

TypeOptional
    ← ColCol TypeElement+ { s_stash_type(match()) }
    / ε { s_stashed_type() }

Char ← . { match() }

StringLit ← "\"" q:QuotedChars "\"" _ → q

QuotedChars ← (!"\"" QuotedChar)* { match() }

QuotedChar :: void
    ← "\\n" / "\\\\" / "\\\"" / !"\\" Char

NameStart
    ← c:Char &{ isalpha(*c) || *c == '_' }

NameCont
    ← c:Char &{ isalnum(*c) || c == '_' }

TypeElement
    ← Name _ / "*" _

Comment
    ← "#" (c:Char &{ *c /= '\n' })* "\n"

_
    ← (" " / "\n" / Comment) *

And ← "&" _
lArrow  ← ("←" / "<-") _
rArrow  ← ("→" / "->") _
Colon ← ":" _
ColCol ← "::" _
Not ← "!" _
lParen ← "(" _
rParen ← ")" _
Plus ← "+" _
Query ← "?" _
Slash ← "/" _
Star ← "*" _

End ← !.
