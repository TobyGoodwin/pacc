#undef NDEBUG

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define Trace if (0)
#define Instr if (0)

static char *string;

#define ST_STACK_BODGE 2000
static int st_stack[ST_STACK_BODGE];
static int st_ptr = 0;

static void pushcont(int c) {
    if (st_ptr == ST_STACK_BODGE) {
	fprintf(stderr, "st_stack overflow\n");
	exit(1);
    }
    Trace fprintf(stderr, "push(%d) -> stack[%d]\n", c, st_ptr);
    st_stack[st_ptr++] = c;
}
static int popcont(void) {
    Trace fprintf(stderr, "pop() stack[%d] -> %d\n", st_ptr - 1, st_stack[st_ptr - 1]);
    return st_stack[--st_ptr];
}

static void panic(const char *e) {
    fprintf(stderr, "pacc: panic: %s\n", e);
    exit(1);
}

static void nomem(void) {
    panic("out of memory");
}

static char *copy(int from, int to) {
    char *r;
    int l;
    Trace fprintf(stderr, "copy(%d, %d)\n", from, to);
    l = to - from;
    r = realloc(0, l + 1);
    if (r) {
	memcpy(r, string + from, l); 
	r[l] = '\0';
    }
    return r;
}
#define match() copy(col, col_expr)
#define rmatch() copy(col_expr, cur->remainder)

#define COL_STACK_BODGE 25
static int col_stack[COL_STACK_BODGE];
static int col_ptr = 0;
static void pushcol(int c) {
    if (col_ptr == COL_STACK_BODGE) {
	fprintf(stderr, "col_stack overflow\n");
	exit(1);
    }
    Trace fprintf(stderr, "push(%d) -> col_stack[%d]\n", c, col_ptr);
    col_stack[col_ptr++] = c;
}
static int popcol(void) {
    Trace fprintf(stderr, "pop() col_stack[%d] -> %d\n", col_ptr - 1, col_stack[col_ptr - 1]);
    return col_stack[--col_ptr];
}

/* a "thr" is a thunk or a rule/column pair */
enum thr { thr_thunk = 71, thr_bound, thr_rule, thr_col };
struct thunkrule {
    enum thr discrim;
    int x;
    int col;
};

enum status {
    no_parse, parsed, evaluated, uncomputed
};

/* A dynamic array of error strings */
char **_pacc_err = 0;
size_t _pacc_err_alloc = 0;
size_t _pacc_err_valid = 0;
off_t _pacc_err_col;

#EMIT_DECLARATIONS

#define THR_STACK_BODGE 40

struct intermed {
    /* Where in the matrix are we? */
    long rule; off_t col;
    enum status status;
    union yy_union value; /* semantic value XXX needs to use g_name */
    off_t remainder; /* unparsed string */
    /* XXX old style */
    struct thunkrule thrs[THR_STACK_BODGE]; /* XXX */
    int thrs_ptr;
    /* XXX new style */
    /* A dynamic array of "call or eval"s. */
    long *cores;
    size_t cores_alloc;
    size_t cores_valid;
    /* A dynamic array of columns. */
    off_t *cols;
    size_t cols_alloc;
    size_t cols_valid;
};

static struct intermed *cur;

static void _pacc_save_col(off_t c) {
    if (cur->cols_valid == cur->cols_alloc) {
	cur->cols_alloc = cur->cols_alloc * 2 + 1;
	cur->cols = realloc(cur->cols, cur->cols_alloc * sizeof(c));
	if (!cur->cols) nomem();
    }
    cur->cols[cur->cols_valid] = c;
    ++cur->cols_valid;
}

static void _pacc_save_core(long c) {
    if (cur->cores_valid == cur->cores_alloc) {
	cur->cores_alloc = cur->cores_alloc * 2 + 1;
	cur->cores = realloc(cur->cores, cur->cores_alloc * sizeof(c));
	if (!cur->cores) nomem();
    }
    cur->cores[cur->cores_valid] = c;
    ++cur->cores_valid;
}

static void pusheval(int t, int col, enum thr type) {
    if (cur->thrs_ptr == THR_STACK_BODGE) {
	fprintf(stderr, "thr_stack overflow\n");
	exit(1);
    }
    Trace fprintf(stderr, "pusheval(%d, %d, %d) -> thrs[%d]\n", t, col, type, cur->thrs_ptr);
    /* XXX old style */
    cur->thrs[cur->thrs_ptr].discrim = type;
    cur->thrs[cur->thrs_ptr].x = t;
    cur->thrs[cur->thrs_ptr].col = col;
    ++cur->thrs_ptr;
    /* XXX new style */
    if (type != thr_col) {
	/* XXX first, need to somewhere check that the shift is valid,
	 * secondly, need to tidy up the enum. */
	_pacc_save_core(t << 2 | (type - thr_thunk));
    }
    _pacc_save_col(col);
}

static int input_length;

/* a pacc parser */
struct _pacc_parser {
    struct intermed **m_bkt;
    unsigned int m_bkt_cnt;
    unsigned char *m_valid;
    unsigned char m_chain_max;
};

static struct _pacc_parser *_pacc_parser_new(void) {
    unsigned int i;
    size_t m_size;
    struct _pacc_parser *r;

    r = realloc(0, sizeof *r);
    if (!r) nomem();
    m_size = n_rules * (input_length + 1);
    r->m_bkt_cnt = 1409; /* XXX: some prime */
    r->m_bkt = realloc(0, sizeof(struct intermed *) * r->m_bkt_cnt);
    if (!r->m_bkt) nomem();
    r->m_valid = realloc(0, 2 * r->m_bkt_cnt);
    for (i = 0; i < r->m_bkt_cnt; ++i) {
	r->m_bkt[i] = 0;
	r->m_valid[i * 2] = 0; /* valid */
	r->m_valid[i * 2 + 1] = 0; /* allocated */
    }
    r->m_chain_max = 0;
    return r;
}

/* hash chains */
static struct intermed *_pacc_result(struct _pacc_parser *p, int col, int rule) {
    unsigned char i;
    unsigned int h;
    struct intermed *bkt, *r;
    assert(col < input_length + 1);
    //assert(rule < n_rules); Not any more!
    //fprintf(stderr, "_pacc_result(%d, %d)\n", col, rule);
    h = (col + (rule << 6) + (rule << 16) - rule) % p->m_bkt_cnt;
    bkt = p->m_bkt[h];
    for (i = 0; i < p->m_valid[h * 2]; ++i) {
	r = bkt + i;
	if (r->col == col && r->rule == rule)
	    return r;
    }
    if (i == p->m_valid[h * 2 + 1]) {
	if (i == 255) panic("bucket too large");
	if (i + 1 > p->m_chain_max) p->m_chain_max = i + 1;
	p->m_bkt[h] = bkt = realloc(bkt, p->m_chain_max * sizeof(struct intermed));
	if (!bkt) nomem();
	p->m_valid[h * 2 + 1] = p->m_chain_max;
    }
    r = bkt + i;
    /* Initialize the new element. */
    r->status = uncomputed;
    r->col = col; r->rule = rule;
    /* XXX old style */
    r->thrs_ptr = 0;
    /* XXX new style */
    r->cores = 0;
    r->cores_alloc = r->cores_valid = 0;
    r->cols = 0;
    r->cols_alloc = r->cols_valid = 0;
    ++(p->m_valid[h * 2]);
    return r;
}

#define M_STACK_BODGE 500
static struct intermed *m_stack[M_STACK_BODGE];
static int m_ptr = 0;
static void pushm(struct intermed *i) {
    if (m_ptr == M_STACK_BODGE) { printf("out of m stack space\n"); exit(0); }
    m_stack[m_ptr++] = i;
}
static struct intermed *popm(void) { return m_stack[--m_ptr]; }

static int engine(struct _pacc_parser *_pacc, PACC_TYPE *result) {
    enum status status;
    int cont, st;
    int col, rule_col, col_expr;
    int _pacc_i;
    int evaluating;
    struct intermed *last;
    col = 0;
    cont = -1;
    evaluating = 0;
    int pos;
    size_t _pacc_cols_p;

#EMIT_ENGINE

    cur = _pacc_result(_pacc, 0, start_rule_id);
    if (parsed && !evaluating && cur->status == parsed) {
	Trace fprintf(stderr, "PARSED! Time to start eval...\n");
	evaluating = 1;
	_pacc_i = 0;
	_pacc_cols_p = 0;
    eval_loop:
	Trace fprintf(stderr, "eval loop with _pacc_i == %d\n", _pacc_i);
	if (_pacc_i < cur->cores_valid) {
	    enum thr discrim = thr_thunk + (cur->cores[_pacc_i] & 3);
	    if (discrim == thr_rule || discrim == thr_bound) {
		int col, rule;
		rule = cur->cores[_pacc_i] >> 2;
		assert(_pacc_cols_p < cur->cols_valid);
		col = cur->cols[_pacc_cols_p];
		++_pacc_i; ++_pacc_cols_p;
		Trace fprintf(stderr, "eval loop: r%d @ c%d\n", rule, col);
		pushm(cur); pushcont(_pacc_i);
		pushcont(_pacc_cols_p); /* XXX type? */
		cur = _pacc_result(_pacc, col, rule);
		_pacc_i = _pacc_cols_p = 0;
		goto eval_loop;
	    } else {
		st = cur->cores[_pacc_i] >> 2; ++_pacc_i;
		assert(_pacc_cols_p < cur->cols_valid);
		col = cur->cols[_pacc_cols_p]; ++_pacc_cols_p;
		assert(_pacc_cols_p < cur->cols_valid);
		col_expr = cur->cols[_pacc_cols_p]; ++_pacc_cols_p;
		goto top;
	    }
	    goto eval_loop;
	}
#if 0
	if (_pacc_i < cur->thrs_ptr) {
	    if (cur->thrs[_pacc_i].discrim == thr_rule ||
		    cur->thrs[_pacc_i].discrim == thr_bound) {
		int col, rule;
		rule = cur->thrs[_pacc_i].x; col = cur->thrs[_pacc_i].col;
		++_pacc_i;
		Trace fprintf(stderr, "eval loop: r%d @ c%d\n", rule, col);
#if 0
		pushcol(rule); pushcol(col); pushcont(_pacc_i);
#else
		pushm(cur); pushcont(_pacc_i);
#endif
		cur = _pacc_result(_pacc, col, rule);
		_pacc_i = 0;
		goto eval_loop;
	    } else {
		st = cur->thrs[_pacc_i].x; col = cur->thrs[_pacc_i].col;
		++_pacc_i;
		col_expr = cur->thrs[_pacc_i].col;
		++_pacc_i;
		goto top;
	    }
	    goto eval_loop;
	}
#endif
	cur->status = evaluated;
	if (m_ptr) {
	    _pacc_cols_p = popcont(); _pacc_i = popcont(); cur = popm();
	    goto eval_loop;
	}
	Trace fprintf(stderr, "eval finished\n");
	goto contin;
    }

    //assert(cur == _pacc->m);
    if (cur->status == no_parse) {
       size_t i;
       printf("expected ");
       for (i = 0; i < _pacc_err_valid; ++i) {
           printf("%s", _pacc_err[i]);
           if (i + 1 < _pacc_err_valid) {
               printf(", ");
               if (i + 2 == _pacc_err_valid) printf("or ");
           }
       }
       printf(" at column %ld\n", _pacc_err_col);
    }

    Instr {
	unsigned int i;
	unsigned long a, v;

	fprintf(stderr, "chain length is %d\n", _pacc->m_chain_max);
	a = v = 0;
	for (i = 0; i < _pacc->m_bkt_cnt; ++i) {
	    fprintf(stderr, "%d/%d ", _pacc->m_valid[i * 2], _pacc->m_valid[i * 2 + 1]);
	    v += _pacc->m_valid[i * 2];
	    a += _pacc->m_valid[i * 2 + 1];
	}
	fprintf(stderr, "\n%ld/%ld\n", v, a);
    }
    if (cur->status == evaluated) {
	Trace fprintf(stderr, "parsed with value " TYPE_PRINTF "\n", cur->value.u0); /* XXX u0 */
	*result = cur->value.u0;
    } else if (cur->status == parsed) {
	Trace fprintf(stderr, "parsed with void value\n");
    } else Trace fprintf(stderr, "not parsed\n");
    return cur->status == evaluated;

contin:
    Trace fprintf(stderr, "continuing in state %d\n", cont);
    st = cont;
    goto top;
}

int parse(char *addr, off_t l, PACC_TYPE *result) {
    struct _pacc_parser *p;
    /* XXX string and input_length should live in the _pacc_parser
     * struct, so should the result
     */
    string = addr;
    input_length = l;
    p = _pacc_parser_new();
    return engine(p, result);
}
