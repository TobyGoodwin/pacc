#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "assert.h"

#define Trace if (0)

static char *string;

#define ST_STACK_BODGE 2000
static int st_stack[ST_STACK_BODGE];
static int st_ptr = 0;

static void pushcont(int c) {
    if (st_ptr == ST_STACK_BODGE) {
	fprintf(stderr, "st_stack overflow\n");
	exit(1);
    }
    Trace fprintf(stderr, "push(%d) -> stack[%d]\n", c, st_ptr);
    st_stack[st_ptr++] = c;
}
static int popcont(void) {
    Trace fprintf(stderr, "pop() stack[%d] -> %d\n", st_ptr - 1, st_stack[st_ptr - 1]);
    return st_stack[--st_ptr];
}

static void nomem(void) {
    fprintf(stderr, "out of memory\n");
    exit(1);
}

static char *copy(int from, int to) {
    char *r;
    int l;
    Trace fprintf(stderr, "copy(%d, %d)\n", from, to);
    l = to - from;
    r = realloc(0, l + 1);
    if (r) {
	memcpy(r, string + from, l); 
	r[l] = '\0';
    }
    return r;
}
#define match() copy(col, col_expr)
#define rmatch() copy(col_expr, cur->remainder)

#define COL_STACK_BODGE 25
static int col_stack[COL_STACK_BODGE];
static int col_ptr = 0;
static void pushcol(int c) {
    if (col_ptr == COL_STACK_BODGE) {
	fprintf(stderr, "col_stack overflow\n");
	exit(1);
    }
    Trace fprintf(stderr, "push(%d) -> col_stack[%d]\n", c, col_ptr);
    col_stack[col_ptr++] = c;
}
static int popcol(void) {
    Trace fprintf(stderr, "pop() col_stack[%d] -> %d\n", col_ptr - 1, col_stack[col_ptr - 1]);
    return col_stack[--col_ptr];
}

/* a "thr" is a thunk or a rule/column pair */
enum thr { thr_thunk = 71, thr_bound, thr_rule, thr_col };
struct thunkrule {
    enum thr discrim;
    int x;
    int col;
};

enum status {
    no_parse, parsed, evaluated, uncomputed
};

/* A dynamic array of error strings */
char **_pacc_err = 0;
size_t _pacc_err_alloc = 0;
size_t _pacc_err_valid = 0;
off_t _pacc_err_col;

#EMIT_DECLARATIONS

#define THR_STACK_BODGE 40

struct intermed {
    enum status status;
    union yy_union value; /* semantic value XXX needs to use g_name */
    int remainder; /* unparsed string */
    struct thunkrule thrs[THR_STACK_BODGE]; /* XXX */
    int thrs_ptr;
    int rule, col; /* XXX: redundant, but handy for debugging */
};

static struct intermed *cur;

static void pusheval(int t, int col, enum thr type) {
    if (cur->thrs_ptr == THR_STACK_BODGE) {
	fprintf(stderr, "thr_stack overflow\n");
	exit(1);
    }
    Trace fprintf(stderr, "pusheval(%d, %d, %d) -> thrs[%d]\n", t, col, type, cur->thrs_ptr);
    cur->thrs[cur->thrs_ptr].discrim = type;
    cur->thrs[cur->thrs_ptr].x = t;
    cur->thrs[cur->thrs_ptr].col = col;
    ++cur->thrs_ptr;
}

static int input_length;

/* a pacc parser */
struct _pacc_parser {
    struct intermed *m;
};

static struct _pacc_parser *_pacc_parser_new(void) {
    int i, j;
    size_t m_size;
    struct _pacc_parser *r;

    r = realloc(0, sizeof *r);
    if (!r) nomem();
    m_size = n_rules * (input_length + 1);
    r->m = realloc(0, sizeof(struct intermed) * m_size);
    if (!r->m) nomem();
    for (i = 0; i < n_rules; ++i)
	for (j = 0; j < input_length + 1; ++j) {
	    struct intermed *p = r->m + j * n_rules + i;
	    p->col = -1;
	}
    return r;
}

/* hash chains */
#define PRIME 727
static int h0s[PRIME], h1s[PRIME];
static int access = 0, used = 0;
static struct intermed *_pacc_result(struct _pacc_parser *p, int col, int rule) {
    unsigned int h0, h1;
    struct intermed *r;
    assert(col < input_length + 1);
    assert(rule < n_rules);
    //fprintf(stderr, "_pacc_result(%d, %d)\n", col, rule);
    r = p->m + col * n_rules + rule;
    if (r->col == -1) {
	h0 = 31 * rule + col; ++h0s[h0 % PRIME];
	h1 = col + (rule << 6) + (rule << 16) - rule; ++h1s[h1 % PRIME];
	r->status = uncomputed;
	r->thrs_ptr = 0;
	r->col = col; r->rule = rule;
	++used;
    }
    ++access;
    return r;
}

#define M_STACK_BODGE 500
static struct intermed *m_stack[M_STACK_BODGE];
static int m_ptr = 0;
static void pushm(struct intermed *i) {
    if (m_ptr == M_STACK_BODGE) { printf("out of m stack space\n"); exit(0); }
    m_stack[m_ptr++] = i;
}
static struct intermed *popm(void) { return m_stack[--m_ptr]; }

static struct intermed *m2_stack[M_STACK_BODGE];
static int m2_ptr = 0;
static void pushm2(struct intermed *i) {
    if (m2_ptr == M_STACK_BODGE) { printf("out of m2 stack space\n"); exit(0); }
    m2_stack[m2_ptr++] = i;
}
static struct intermed *popm2(void) { return m2_stack[--m2_ptr]; }

static int engine(struct _pacc_parser *_pacc, PACC_TYPE *result) {
    enum status status;
    int cont, st;
    int col, rule_col, col_expr;
    int _pacc_i;
    int evaluating;
    struct intermed *last;
    col = 0;
    cont = -1;
    evaluating = 0;
    int pos;

#EMIT_ENGINE

    cur = _pacc_result(_pacc, 0, 0);
    if (parsed && !evaluating && cur->status == parsed) {
	Trace fprintf(stderr, "PARSED! Time to start eval...\n");
	evaluating = 1;
	_pacc_i = 0;
    eval_loop:
	Trace fprintf(stderr, "eval loop with _pacc_i == %d\n", _pacc_i);
	if (_pacc_i < cur->thrs_ptr) {
	    if (cur->thrs[_pacc_i].discrim == thr_rule ||
		    cur->thrs[_pacc_i].discrim == thr_bound) {
		int col, rule;
		rule = cur->thrs[_pacc_i].x; col = cur->thrs[_pacc_i].col;
		++_pacc_i;
		Trace fprintf(stderr, "eval loop: r%d @ c%d\n", rule, col);
		pushm2(cur); pushcont(_pacc_i);
		cur = _pacc_result(_pacc, col, rule);
		_pacc_i = 0;
		goto eval_loop;
	    } else {
		st = cur->thrs[_pacc_i].x; col = cur->thrs[_pacc_i].col;
		++_pacc_i;
		col_expr = cur->thrs[_pacc_i].col;
		++_pacc_i;
		goto top;
	    }
	    goto eval_loop;
	}
	cur->status = evaluated;
	if (m2_ptr) {
	    _pacc_i = popcont(); cur = popm2();
	    goto eval_loop;
	}
	Trace fprintf(stderr, "eval finished\n");
	goto contin;
    }

    assert(cur == _pacc->m);
    if (cur->status == no_parse) {
       size_t i;
       printf("expected ");
       for (i = 0; i < _pacc_err_valid; ++i) {
           printf("%s", _pacc_err[i]);
           if (i + 1 < _pacc_err_valid) {
               printf(", ");
               if (i + 2 == _pacc_err_valid) printf("or ");
           }
       }
       printf(" at column %ld\n", _pacc_err_col);
    }

    {
	int i, m;

    Trace fprintf(stderr, "matrix accessed %d times\n", access);
    Trace fprintf(stderr, "used %d slots out of %d\n", used, n_rules * (input_length + 1));
    m = 0;
    for (i = 0; i < PRIME; ++i)
	if (h0s[i] > m) m = h0s[i];
    Trace fprintf(stderr, "h0: longest chain %d\n", m);
    m = 0;
    for (i = 0; i < PRIME; ++i)
	if (h1s[i] > m) m = h1s[i];
    Trace fprintf(stderr, "h1: longest chain %d\n", m);
    }
    if (cur->status == evaluated) {
	Trace fprintf(stderr, "parsed with value " TYPE_PRINTF "\n", cur->value.u0); /* XXX u0 */
	*result = cur->value.u0;
    } else if (cur->status == parsed) {
	Trace fprintf(stderr, "parsed with void value\n");
    } else Trace fprintf(stderr, "not parsed\n");
    return cur->status == evaluated;

contin:
    Trace fprintf(stderr, "continuing in state %d\n", cont);
    st = cont;
    goto top;
}

int parse(char *addr, off_t l, PACC_TYPE *result) {
    struct _pacc_parser *p;
    /* XXX string and input_length should live in the _pacc_parser
     * struct, so should the result
     */
    string = addr;
    input_length = l;
    p = _pacc_parser_new();
    return engine(p, result);
}
