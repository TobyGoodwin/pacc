/*
type int
parse java/simple.java 123
echo FIXME LATER
*/

{

    int iskeyword(char *k) {
	if (strcmp("abstract", k) == 0) return 1;
	if (strcmp("boolean", k) == 0) return 1;
	if (strcmp("break", k) == 0) return 1;
	if (strcmp("byte", k) == 0) return 1;
	if (strcmp("case", k) == 0) return 1;
	if (strcmp("catch", k) == 0) return 1;
	if (strcmp("char", k) == 0) return 1;
	if (strcmp("class", k) == 0) return 1;
	if (strcmp("const", k) == 0) return 1;
	if (strcmp("continue", k) == 0) return 1;
	if (strcmp("default", k) == 0) return 1;
	if (strcmp("do", k) == 0) return 1;
	if (strcmp("double", k) == 0) return 1;
	if (strcmp("else", k) == 0) return 1;
	if (strcmp("extends", k) == 0) return 1;
	if (strcmp("final", k) == 0) return 1;
	if (strcmp("finally", k) == 0) return 1;
	if (strcmp("float", k) == 0) return 1;
	if (strcmp("for", k) == 0) return 1;
	if (strcmp("goto", k) == 0) return 1;
	if (strcmp("if", k) == 0) return 1;
	if (strcmp("implements", k) == 0) return 1;
	if (strcmp("import", k) == 0) return 1;
	if (strcmp("instanceof", k) == 0) return 1;
	if (strcmp("int", k) == 0) return 1;
	if (strcmp("interface", k) == 0) return 1;
	if (strcmp("long", k) == 0) return 1;
	if (strcmp("native", k) == 0) return 1;
	if (strcmp("new", k) == 0) return 1;
	if (strcmp("package", k) == 0) return 1;
	if (strcmp("private", k) == 0) return 1;
	if (strcmp("protected", k) == 0) return 1;
	if (strcmp("public", k) == 0) return 1;
	if (strcmp("return", k) == 0) return 1;
	if (strcmp("short", k) == 0) return 1;
	if (strcmp("static", k) == 0) return 1;
	if (strcmp("strictfp", k) == 0) return 1;
	if (strcmp("super", k) == 0) return 1;
	if (strcmp("switch", k) == 0) return 1;
	if (strcmp("synchronized", k) == 0) return 1;
	if (strcmp("this", k) == 0) return 1;
	if (strcmp("throw", k) == 0) return 1;
	if (strcmp("throws", k) == 0) return 1;
	if (strcmp("transient", k) == 0) return 1;
	if (strcmp("try", k) == 0) return 1;
	if (strcmp("void", k) == 0) return 1;
	if (strcmp("volatile", k) == 0) return 1;
	if (strcmp("while", k) == 0) return 1;
	return 0;
    }

}

# As usual, the lexical rules eat whitespace *after* each lexical
# element, so the start rule needs to permit whitespace at the beginning
# of the input. And we anchor the parse, so that the whole input must be
# consumed.
Start :: void =
    Spacing
    CompilationUnit
    !. -> { 0 }

////---------------- Lexical Structure --------------------


// Whitespace and comments

LineTerminator :: void =
	"\n" # / "\r\n"

Spacing :: void =
	  Space*

Space :: void =
	  WhiteSpace
	/ Comment

WhiteSpace :: void =
	  " " / "\t" / "\f" / LineTerminator

Comment :: void =
	  TraditionalComment
	/ EndOfLineComment

TraditionalComment :: void =
	"/*" (!"*/" .)* "*/"

EndOfLineComment :: void =
	"//" (!LineTerminator .)* LineTerminator

InputCharacter :: void =
	!LineTerminator c:.					# -> c

Space :: void =
	  WhiteSpace						# -> {()}
	/ Comment						# -> {()}

WhiteSpace :: void =
	  " " / "\t" / "\f" / LineTerminator

Comment :: void =
	  TraditionalComment
	/ EndOfLineComment

// Keywords and identifiers

Identifier :: void =
	!Keyword !BooleanLiteral !NullLiteral s:Word		# -> s

Keyword :: void =
	  s:Word	&{iskeyword(s)}			# -> s

Word :: ref_t =
	  c:(JavaLetter JavaLetterOrDigit*) Spacing -> c	# -> {c : cs}

JavaLetter :: void =
	  c:.		&{isalpha(ref_0(c))}			# -> c
	/ "_"
	/ "$"

JavaLetterOrDigit :: void =
	  c:.		&{isalnum(ref_0(c))}			# -> c
	/ "_"
	/ "$"


// Symbols (operators and punctuation)
Sym :: void =
	  s:SymChars Spacing					# -> s

SymChars :: void =
	  ">>>="
	/ ">>=" / "<<=" / ">>>"
	/ ">>" / "<<"
	/ "+=" / "-=" / "*=" / "/=" / "%=" / "&=" / "^=" / "|="
	/ "++" / "//" / "&&" / "||" / "<=" / ">=" / "==" / "!="
	/ ";" / ":" / "," / "." / "{" / "}" / "(" / ")"
	/ "[" / "]" / "!" / "~" / "+" / "-" / "*" / "/"
	/ "%" / "<" / ">" / "=" / "&" / "^" / "|" / "?"


// Literals
Literal :: void =
	  FloatingPointLiteral
	/ IntegerLiteral
	/ BooleanLiteral
	/ CharacterLiteral
	/ StringLiteral	
	/ NullLiteral


// Integer literals
IntegerLiteral :: void =
	  v:HexNumeral t:IntegerTypeSuffixOpt Spacing	# ->	{t v}
	/ v:OctalNumeral t:IntegerTypeSuffixOpt Spacing # ->	{t v}
	/ v:DecimalNumeral t:IntegerTypeSuffixOpt Spacing # ->	{t v}

#IntegerTypeSuffixOpt :: void{Integer # -> Literal} =
IntegerTypeSuffixOpt :: void =
	  ("l" / "L")				# -> {LitLong}
	/ 					# -> {LitInt}

HexNumeral :: void =
	  ("0x" / "0X") v:HexDigits		# -> {v}

HexDigits :: void =
	  v:HexDigits d:HexDigit		# -> {v * 16 + toInteger d}
	/ d:HexDigit				# -> {toInteger d}

HexDigit :: void =
	  c:.	&{isHexDigit c}		# -> {digitToInt c}

OctalNumeral :: void =
	  "0" v:OctalDigits			# -> {v}

OctalDigits :: void =
	  v:OctalDigits d:OctalDigit		# -> {v * 8 + toInteger d}
	/ d:OctalDigit				# -> {toInteger d}

OctalDigit :: void =
	  c:.	&{isOctDigit c}		# -> {digitToInt c}

DecimalNumeral :: void =
	  v:Digits				# -> {v}

Digits :: void =
	  v:Digits d:Digit			# -> {v * 10 + toInteger d}
	/ d:Digit				# -> {toInteger d}

Digit :: void =
	  c:.	&{isDigit c}		# -> {digitToInt c}


// Floating point
FloatingPointLiteral :: void =
	  m:Digits "." f:FractionPartOpt e:ExponentPartOpt t:FloatTypeSuffixOpt
	  Spacing
		# -> {t (fromRational ((fromInteger m + f) * 10.0 ^^ e))}

	/ "." f:FractionPart e:ExponentPartOpt t:FloatTypeSuffixOpt Spacing
		# -> {t (fromRational (f * 10.0 ^^ e))}

	/ m:Digits e:ExponentPart t:FloatTypeSuffixOpt Spacing
		# -> {t (fromInteger m * 10.0 ^^ e)}

	/ m:Digits e:ExponentPartOpt t:FloatTypeSuffix Spacing
		# -> {t (fromInteger m * 10.0 ^^ e)}

FractionPartOpt :: void =
	  f:FractionPart		# -> {f}
	/ 				# -> {0.0}

FractionPart :: void =
	  d:Digit			# -> { toEnum d / 10.0 }
	/ d:Digit f:FractionPart	# -> { (f + toEnum d) / 10.0 }

ExponentPartOpt :: void =
	  e:ExponentPart		# -> { e }
	/ 				# -> { 0 }

ExponentPart :: void =
	  ("e" / "E") "-" e:Digits	# -> { -e }
	/ ("e" / "E") "+"? e:Digits	# -> { e }

#FloatTypeSuffixOpt :: void{Rational # -> Literal} =
#	  t:FloatTypeSuffix		# -> t
#	/ 				# -> {\r -> LitDouble (fromRational r)}

FloatTypeSuffixOpt :: void =
	  t:FloatTypeSuffix		# -> t
	/ 				# -> {\r -> LitDouble (fromRational r)}

#FloatTypeSuffix :: void{Rational # -> Literal} =
#	  ('f' / 'F')			# -> {\r -> LitFloat (fromRational r)}
#	/ ('d' / 'D')			# -> {\r -> LitDouble (fromRational r)}

FloatTypeSuffix :: void =
	  ("f" / "F")			# -> {\r -> LitFloat (fromRational r)}
	/ ("d" / "D")			# -> {\r -> LitDouble (fromRational r)}


// Boolean literals
BooleanLiteral :: void =
	  "true":Word			# -> { LitBool True }
	/ "false":Word			# -> { LitBool False }


// Character and string literals
CharacterLiteral :: void =
	  "'" c:SingleCharacter "'" Spacing	# -> { LitChar c }
	/ "'" c:EscapeSequence "'" Spacing	# -> { LitChar c }

SingleCharacter :: void =
	  !"'" !"\\" c:InputCharacter		# -> c

StringLiteral :: void =
	  "\"" s:StringCharacter* "\"" Spacing	# -> { LitString s }

StringCharacter :: void =
	  !"\"" !"\\" c:InputCharacter		# -> c
	/ c:EscapeSequence			# -> c

EscapeSequence :: void =
	  "\\" "b"				# -> {'\b'}
	/ "\\" "t"				# -> {'\t'}
	/ "\\" "n"				# -> {'\n'}
	/ "\\" "f"				# -> {'\f'}
	/ "\\" "r"				# -> {'\r'}
	/ "\\" "\""				# -> {'\"'}
	/ "\\" "'"				# -> {'\''}
	/ "\\" "\\"				# -> {'\\'}
	/ c:OctalEscape				# -> c

OctalEscape :: void =
	  "\\" x:ZeroToThree y:OctalDigit z:OctalDigit
						# -> {chr (x*8*8 + y*8 + z)}
	/ "\\" y:OctalDigit z:OctalDigit	# -> {chr (y*8 + z)}
	/ "\\" z:OctalDigit			# -> {chr (z)}

ZeroToThree :: void =
	  "0"					# -> {0}
	/ "1"					# -> {1}
	/ "2"					# -> {2}
	/ "3"					# -> {3}


// Null literals
NullLiteral :: void =
	  "null":Word				# -> { LitNull }


//------------------ Types --------------------

TypeSpec :: void =
	  t:TypeName d:Dims			# -> {DtArray t d}
	/ TypeName

TypeName :: void =
	  PrimitiveType
	/ n:QualifiedName			# -> {DtName n}

PrimitiveType :: void =
	  "byte":Word				# -> {DtByte}
	/ "short":Word				# -> {DtShort}
	/ "char":Word				# -> {DtChar}
	/ "int":Word				# -> {DtInt}
	/ "long":Word				# -> {DtLong}
	/ "float":Word				# -> {DtFloat}
	/ "double":Word				# -> {DtDouble}
	/ "boolean":Word			# -> {DtBoolean}

#QualifiedName :: void{[Identifier]} =
#	  i:Identifier is:(".":Sym i:Identifier # -> i)*	-> {i : is}

QualifiedName :: void =
	  i:Identifier is:(".":Sym i:Identifier /* -> i */)*	-> {i : is}

DimsOpt :: void =
	  d:Dims				# -> d
	/					# -> {0}

Dims :: void =
	  "[":Sym "]":Sym d:Dims		# -> {d+1}
	/ "[":Sym "]":Sym			# -> {1}


//------------------ Expressions --------------------

Expression :: void =
	  l:CondExpr op:AssignmentOperator r:Expression
						# -> {ExpBinary op l r}
	/ CondExpr

AssignmentOperator :: void =
	  "=":Sym				# -> {"="}
	/ "+=":Sym				# -> {"+="}
	/ "-=":Sym				# -> {"-="}
	/ "*=":Sym				# -> {"*="}
	/ "/=":Sym				# -> {"/="}
	/ "%=":Sym				# -> {"%="}
	/ "&=":Sym				# -> {"&="}
	/ "|=":Sym				# -> {"|="}
	/ "^=":Sym				# -> {"^="}
	/ "<<=":Sym				# -> {"<<="}
	/ ">>=":Sym				# -> {">>="}
	/ ">>>=":Sym				# -> {">>>="}

CondExpr :: void =
	  c:CondOrExpr "?":Sym t:Expression ":":Sym f:CondExpr
						# -> {ExpCond c t f}
	/ CondOrExpr

CondOrExpr :: void =
	  l:CondOrExpr "||":Sym r:CondAndExpr	# -> {ExpBinary "||" l r}
	/ CondAndExpr

CondAndExpr :: void =
	  l:CondAndExpr "&&":Sym r:OrExpr	# -> {ExpBinary "&&" l r}
	/ OrExpr

OrExpr :: void =
	  l:OrExpr "|":Sym r:XorExpr		# -> {ExpBinary "|" l r}
	/ XorExpr

XorExpr :: void =
	  l:XorExpr "^":Sym r:AndExpr		# -> {ExpBinary "^" l r}
	/ AndExpr

AndExpr :: void =
	  l:AndExpr "&":Sym r:EqExpr		# -> {ExpBinary "&" l r}
	/ EqExpr

EqExpr :: void =
	  l:EqExpr "==":Sym r:RelExpr		# -> {ExpBinary "==" l r}
	/ l:EqExpr "!=":Sym r:RelExpr		# -> {ExpBinary "!=" l r}
	/ RelExpr

RelExpr :: void =
	  l:RelExpr "<=":Sym r:ShiftExpr	# -> {ExpBinary "<=" l r}
	/ l:RelExpr ">=":Sym r:ShiftExpr	# -> {ExpBinary ">=" l r}
	/ l:RelExpr "<":Sym r:ShiftExpr		# -> {ExpBinary "<" l r}
	/ l:RelExpr ">":Sym r:ShiftExpr		# -> {ExpBinary ">" l r}
	/ l:RelExpr "instanceof":Word t:TypeSpec # -> {ExpInstanceof l t}
	/ ShiftExpr

ShiftExpr :: void =
	  l:ShiftExpr "<<":Sym r:AddExpr	# -> {ExpBinary "<<" l r}
	/ l:ShiftExpr ">>":Sym r:AddExpr	# -> {ExpBinary ">>" l r}
	/ l:ShiftExpr ">>>":Sym r:AddExpr	# -> {ExpBinary ">>>" l r}
	/ AddExpr

AddExpr :: void =
	  l:AddExpr "+":Sym r:MultExpr		# -> {ExpBinary "+" l r}
	/ l:AddExpr "-":Sym r:MultExpr		# -> {ExpBinary "-" l r}
	/ MultExpr

MultExpr :: void =
	  l:MultExpr "*":Sym r:UnaryExpr	# -> {ExpBinary "*" l r}
	/ l:MultExpr "/":Sym r:UnaryExpr	# -> {ExpBinary "/" l r}
	/ l:MultExpr "%":Sym r:UnaryExpr	# -> {ExpBinary "%" l r}
	/ UnaryExpr

UnaryExpr :: void =
	  "++":Sym e:UnaryExpr			# -> {ExpPrefix "++" e}
	/ "//":Sym e:UnaryExpr			# -> {ExpPrefix "--" e}
	/ "+":Sym e:UnaryExpr			# -> {ExpPrefix "+" e}
	/ "-":Sym e:UnaryExpr			# -> {ExpPrefix "-" e}
	/ UnaryExprNotPlusMinus

UnaryExprNotPlusMinus :: void =
	  "~":Sym e:UnaryExpr			# -> {ExpPrefix "~" e}
	/ "!":Sym e:UnaryExpr			# -> {ExpPrefix "!" e}
	/ "(":Sym t:TypeName d:Dims ")":Sym e:UnaryExpr
						# -> {ExpCast (DtArray t d) e}
	/ "(":Sym t:PrimitiveType ")":Sym e:UnaryExpr
						# -> {ExpCast t e}
	/ "(":Sym t:TypeName ")":Sym e:UnaryExprNotPlusMinus
						# -> {ExpCast t e}
	/ PostfixExpr

PostfixExpr :: void =
	  l:PostfixExpr "[":Sym r:Expression? "]":Sym
						# -> {ExpArray l r}
	/ l:PostfixExpr a:Arguments		# -> {ExpCall l a}
	/ l:PostfixExpr ".":Sym r:PrimExpr	# -> {ExpSelect l r}
	/ l:PostfixExpr ".":Sym "class":Word	# -> {ExpDotClass l}
	/ l:PostfixExpr "++":Sym		# -> {ExpPostfix "++" l}
	/ l:PostfixExpr "//":Sym		# -> {ExpPostfix "--" l}
	/ PrimExpr

PrimExpr :: void =
	  l:Literal				# -> {ExpLiteral l}
	/ i:Identifier				# -> {ExpIdent i}
	/ "(":Sym e:Expression ")":Sym		# -> e
	/ "this":Word				# -> {ExpThis}
	/ "super":Word				# -> {ExpSuper}
	/ "new":Word n:QualifiedName a:Arguments b:ClassBody?
						# -> {ExpNewClass n a b}
	/ "new":Word t:TypeName de:DimExpr+ d:DimsOpt
						# -> {ExpNewArray t de d}
	/ "new":Word t:TypeName d:Dims i:ArrayInitializer
						# -> {ExpNewArrayInit t d i}
	/ "void":Word ".":Sym "class":Word	# -> {ExpVoidClass}

#Arguments :: void{[Expression]} =
Arguments :: void =
	  "(":Sym e:Expression es:(",":Sym e:Expression /* -> e */)* ")":Sym
						# -> {e : es}
	/ "(":Sym ")":Sym				# -> {[]}

DimExpr :: void =
	  "[":Sym e:Expression "]":Sym	# -> e

#ArrayInitializer :: void{[Initializer]} =
ArrayInitializer :: void =
	  "{":Sym is:(i:Initializer ",":Sym /* -> i */ )* "}":Sym
						# -> is
	/ "{":Sym i:Initializer is:(",":Sym i:Initializer /* -> i */)* "}":Sym
						# -> {i : is}

Initializer :: void =
	  ai:ArrayInitializer			# -> {IniList ai}
	/ e:Expression				# -> {IniExpr e}


//------------------ Statements --------------------

#Block :: void{[Statement]} =
Block :: void =
	  "{":Sym ss:BlockStatement* "}":Sym	# -> ss

BlockStatement :: void =
	  d:Declaration				# -> {StDecl d}
	/ Statement

Statement :: void =
	  b:Block				# -> {StBlock b}

	/ "if":Word e:ParExpr t:Statement f:("else":Word s:Statement /* -> s*/)?
						# -> {StIf e t f}

	/ "for":Word "(":Sym
		i:ForInitOpt ";":Sym
		c:Expression? ";":Sym
		n:ExpressionsOpt ")":Sym
	  b:Statement				# -> {StFor i c n b}

	/ "while":Word e:ParExpr b:Statement	# -> {StWhile e b}

	/ "do":Word b:Statement "while":Word e:ParExpr ";":Sym	# -> {StDo b e}

	/ "try":Word b:Block c:CatchClause* "finally":Word f:Block
						# -> {StTry b c (Just f)}
	/ "try":Word b:Block c:CatchClause+	# -> {StTry b c Nothing}

	/ "switch":Word e:ParExpr "{":Sym b:SwitchGroup* "}":Sym
						# -> {StSwitch e b}

	/ "synchronized":Word e:ParExpr b:Block	# -> {StSynch e b}

	/ "return":Word e:Expression? ";":Sym	# -> {StReturn e}

	/ "throw":Word e:Expression ";":Sym	# -> {StThrow e}

	/ "break":Word i:Identifier? ";":Sym	# -> {StBreak i}

	/ "continue":Word i:Identifier? ";":Sym	# -> {StContinue i}

	/ l:Identifier ":":Sym s:Statement	# -> {StLabel l s}

	/ e:Expression ";":Sym			# -> {StExpr e}

	/ ";":Sym					# -> {StNull}

ParExpr :: void =
	  "(":Sym e:Expression ")":Sym		# -> e

ForInitOpt :: void =
	  f:FinalOpt t:TypeSpec d:Declarators	# -> {FiDecl f t d}
	/ e:ExpressionsOpt			# -> {FiExpr e}

FinalOpt :: void =
	  "final":Word				# -> {True}
	/					# -> {False}

#ExpressionsOpt :: void{[Expression]} =
ExpressionsOpt :: void =
	  e:Expression es:(",":Sym e:Expression /* -> e */)*	-> {e : es}
	/ 						# -> {[]}

CatchClause :: void =
	  "catch":Word "(":Sym p:FormalParam ")":Sym b:Block
						# -> {(p, b)}

SwitchGroup :: void =
	  "case":Word e:Expression ":":Sym ss:BlockStatement*
						# -> {SwCase e ss}
	/ "default":Word ":":Sym ss:BlockStatement*
						# -> {SwDefault ss}


//------------------ Declarations --------------------

Modifier :: void =
	  "public":Word				# -> {ModPublic}
	/ "protected":Word			# -> {ModProtected}
	/ "private":Word			# -> {ModPrivate}
	/ "static":Word				# -> {ModStatic}
	/ "abstract":Word			# -> {ModAbstract}
	/ "final":Word				# -> {ModFinal}
	/ "native":Word				# -> {ModNative}
	/ "synchronized":Word			# -> {ModSynchronized}
	/ "transient":Word			# -> {ModTransient}
	/ "volatile":Word			# -> {ModVolatile}
	/ "strictfp":Word			# -> {ModStrictfp}

FormalParam :: void =
	  f:FinalOpt t:TypeSpec i:Identifier d:DimsOpt
						# -> {(f, t, i, d)}

#FormalParams :: void{[FormalParam]} =
FormalParams :: void =
	  "(":Sym p:FormalParam ps:(",":Sym p:FormalParam /* -> p */)* ")":Sym
						# -> {p : ps}
	/ "(":Sym ")":Sym				# -> {[]}

#Declarators :: void{[Declarator]} =
Declarators :: void =
	  d:Declarator ds:(",":Sym d:Declarator /* -> d */)*
						# -> {d : ds}

Declarator :: void =
	  id:Identifier dim:DimsOpt init:("=":Sym i:Initializer /* -> i */)?
						# -> {(id, dim, init)}

#ClassBody :: void{[Declaration]} =
ClassBody :: void =
	  "{":Sym ds:Declaration* "}":Sym		# -> ds

Declaration :: void =

	  // Variable declaration
	  ms:Modifier* t:TypeSpec ds:Declarators ";":Sym
				# -> {DeclSimple ms t ds}

	  // Method declaration
	/ mods:Modifier*
	  typ:(t:TypeSpec /* -> {Just t}*/ / "void":Word /*-> {Nothing}*/)
	  id:Identifier ps:FormalParams dim:DimsOpt th:ThrowsOpt
	  body:(b:Block /* -> {Just b}*/ / ";":Sym /*-> {Nothing}*/)
				# -> {DeclMethod mods typ id ps dim th body}

	  // Constructor declaration
	/ mods:Modifier* id:Identifier ps:FormalParams th:ThrowsOpt body:Block
				# -> {DeclConstructor mods id ps th body}

	  // Class declaration
	/ mods:Modifier* "class":Word id:Identifier
	  ext:("extends":Word t:TypeSpec /* -> t*/)?
	  imp:("implements":Word t:TypeSpec ts:(",":Sym t:TypeSpec /* -> t*/)*
		/* -> {t:ts}*/ / /*-> {[]}*/)
	  body:ClassBody	# -> {DeclClass mods id ext imp body}

	  // Interface declaration
	/ mods:Modifier* "interface":Word id:Identifier
	  ext:("extends":Word t:TypeSpec ts:(",":Sym t:TypeSpec /* -> t*/)* #-> {t:ts}
		/ /* -> {[]}*/)
	  body:ClassBody	# -> {DeclInterface mods id ext body}

	  // Initialization block
	/ st:("static":Word?) # -> {True} / -> {False})
	#/ st:("static":Word # -> {True} / -> {False})
	  b:Block
				# -> {DeclBlock st b}

#ThrowsOpt :: void{[Name]} =
ThrowsOpt :: void =
	  "throws":Word n:QualifiedName ns:(",":Sym n:QualifiedName /* -> n*/)*
						# -> {n : ns}
	/					# -> {[]}


//------------------ Top Level --------------------

CompilationUnit :: void =
	  Spacing		// eat whitespace at beginning
	  pkg:("package":Word n:QualifiedName ";":Sym # -> {Just n}
		/ /* -> {Nothing}*/)
	  imps:ImportDecl*
	  decls:Declaration*
	  !.			// make sure we consume all input text
				# -> {(pkg, imps, decls)}
	

ImportDecl :: void =
	  "import":Word name:QualifiedName
	  allflag:(".":Sym "*":Sym /* -> {True} / -> {False}*/)
	  ";":Sym
				# -> {(name, allflag)}

/*
{

// Preprocess unicode escapes and newlines before parsing
javaPrep :: void # -> String
javaPrep [] = []
javaPrep ('\r':'\n':s) = '\n':javaPrep s
javaPrep ('\r':s) = '\n':javaPrep s
javaPrep ('\\':'\\':s) = '\\':'\\':javaPrep s
javaPrep ('\\':'u':s) = case s of
	h1:h2:h3:h4:s # ->
		if isHexDigit h1 && isHexDigit h2 &&
		   isHexDigit h3 && isHexDigit h4
		then chr v4:javaPrep s
		else error "invalid Unicode escape sequence"
		where	v1 = digitToInt h1
			v2 = v1*16 + digitToInt h2
			v3 = v2*16 + digitToInt h3
			v4 = v3*16 + digitToInt h4
	_ # -> error "incomplete Unicode escape sequence"
javaPrep (c:s) = c:javaPrep s


javaParseFile :: void # -> IO CompUnit
javaParseFile name =
	do	text <- readFile name
		let text' = javaPrep text
		    derivs = javaParse name text'
		case javaCompilationUnit derivs of
			Parsed cu _ _ # -> return cu
			NoParse e # -> fail (show e)

}

*/
